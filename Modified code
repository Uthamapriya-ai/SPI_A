import math
import numpy as np
from numpy.lib.scimath import sqrt as csqrt
from numpy.linalg import norm
import scipy.constants as sp
from scipy.fftpack import fft2, ifft2 , ifftshift, fftshift
from scipy.linalg import hadamard
from sympy import fwht,ifwht
import matplotlib.pyplot as plt
import time

start = time.time()
def plot2(variable,title,xmin,xmax,flag) :
    if flag ==1:
        plt.figure()
        plt.imshow(variable)  
        plt.xlim(xmin,xmax)
        plt.ylim(xmin,xmax)
        plt.title(title)
        plt.colorbar()
        plt.show()   
    
def Sampling(Lx,Nx):
    deltax = Lx/Nx;# sampling space
    x = np.arange(-Lx/2,Lx/2,deltax); y=x;
    X, Y = np.meshgrid(x,y);
    r = np.sqrt(np.square(X)+np.square(Y));
    delfx = 1/Lx; 
    fx = np.arange(-1/(2*deltax),(1/(2*deltax)),delfx); fy=fx;
    FX, FY = np.meshgrid(fx,fy);
    # rf = np.sqrt(np.square(FX)+np.square(FY));
    return(r,deltax,X,Y,fx, fy,FX,FY)
    
    
def gaussian(Beamwaist,z,wavelength,k,r,rt):
    Zr = (sp.pi*Beamwaist**2)/wavelength # rayleigh distance
    w = Beamwaist*math.sqrt(1+np.square(z/Zr)); # Beamradii
    R = z + (np.square(Zr)/z) # radius of curvature
    phi = math.atan(z/Zr); # Gouy phase
    # Farfield_div = math.degrees(wavelength/(sp.pi*Beamwaist)); # Farfield divergence
    gau1 = np.multiply(np.exp(-(np.square(r)/np.square(w))),(np.exp(-1j*k*z+1j*phi))); # Paraxial gaussian function
    gau1t = np.multiply(np.exp(-(np.square(rt)/np.square(w))),(np.exp(-1j*k*z+1j*phi))); # Tilted gaussian function
    return(np.multiply(gau1,np.exp(-1j*k*(np.square(r)/(2*R)))),np.multiply(gau1t,np.exp(-1j*k*(np.square(rt)/(2*R)))))


def object(w,physize,Nx,deltax):
    nx = int(physize//deltax);                       
    p = int((Nx-nx)//2);                         
    if (nx % 2 == 0):                        
         p = p;
    else:
        nx = (physize//deltax)-1;
        p = (Nx-nx)//2;   
    li = np.linspace(-1,1,nx);
    Xi,Yi = np.meshgrid(li,li)
    rad = np.sqrt(Xi**2+Yi**2)<0.5
    th = np.arctan2(Yi,Xi)
    S= 1+np.sin(w*th)
    S = np.pad(S<1*rad,p,'constant')
    return(S)
    
    
def ASM_func(wavelen,k,Fx,Fy,Z):
   return(np.exp(-1j*k*(np.real(csqrt(1-(np.square(Fx/k)+np.square(Fy/k)))))*Z))

def for_trans(x,Measurements):
    A= fwht(np.reshape(abs(x),Measurements))
    return(A)

def inv_trans(y,Measurements):
    rec = (ifwht(y)) # applying ifwht on obtained 1d data
    for i in range(0,Measurements):
        rec[i]=float(rec[i])
    res = np.reshape(rec,(int(math.sqrt(Measurements)),int(math.sqrt(Measurements))))
    return(res)
    

def threshold(x,theta):
    return(np.multiply(np.sign(x),(np.max(np.abs(x)-theta,0))))
          
frequency = 0.35e12; # in THz
wavelength=sp.nu2lambda(frequency)*1; # wavelength in meters
k = (2*sp.pi)/wavelength; # wavenumber in rad/meters

### Sampling =============================================================================
Lx = 50e-3; # Window size
Nx = 256; # Pixels
r,deltax,X,Y,fx,fy,FX,FY = Sampling(Lx,Nx)
# plot2(r,'radial',fx,fy,0)
# =============================================================================

## Gaussian =============================================================================
Beamwaist = 0.75e-3; # beamwaist in meters
z = 10e-3 #propagation distance in meters
xt = -15e-3
rt = np.sqrt(np.square(X-xt)+np.square(Y));
gau,gaut = gaussian(Beamwaist,z,wavelength,k,r,rt)
plot2(abs(gau),'propagated Gaussian beam z=10 mm',0,Nx,0)

# =======================================================================================

## Object =============================================================================
physize = 40e-3;
w = 5; # Number of spokes
obj=object(w,physize,Nx,deltax) # Object 
plot2((obj),'Object',0,Nx,0) 
# =============================================================================


## Beam Propagation to the SPI Unit including Holography =============================================================================
x = ifft2(fftshift(fft2(obj))*ASM_func(wavelength,k,FX,FY,20e-3)) # object beam propagation to the mask plane
plot2(abs(x),'Diffracted Object beam',0,Nx,0)

# =============================================================================

### Mask & SPI Measurements =============================================================================
blk_size = 256;
Measurements = blk_size*blk_size;
y= for_trans(x,Measurements); # Calculates fwht of x
# =============================================================================

## Reconstruction =============================================================================
rec_x =inv_trans(y,Measurements) # calculates inverse fwht
plot2((rec_x),'SPI Reconstructed Image',0,blk_size,1) # SPI Reconstructed image
# =============================================================================

# Implementing ISTA Code=============================================================================
# Initialization
k_iter = 200;
Lambda = 1e-6;
L = 5e-2;
x0 = np.zeros(np.shape(x)); min_x = np.zeros(k_iter);
for i in range(1,k_iter):
    v=x0+(1/L)*(inv_trans(np.array(y)-np.array(for_trans(x0,Measurements)),Measurements));
    x0=threshold(v,Lambda/L);
    min_x[i] = 1/2*np.square(norm(np.array(for_trans(x0,Measurements)),2))+Lambda*norm(x0,1)
plot2((x0),'Reconstructed using ISTA',0,blk_size,1) # SPI Reconstructed image
    
# =============================================================================
end = time.time()
print('Execution time in secs:', (end-start))   
